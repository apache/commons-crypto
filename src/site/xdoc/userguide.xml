<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor
  license agreements. See the NOTICE file distributed with this work for additional
  information regarding copyright ownership. The ASF licenses this file to
  You under the Apache License, Version 2.0 (the "License"); you may not use
  this file except in compliance with the License. You may obtain a copy of
  the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required
  by applicable law or agreed to in writing, software distributed under the
  License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. See the License for the specific
  language governing permissions and limitations under the License. -->
<document>
  <properties>
    <title>Commons Crypto - User guide</title>
    <author email="dev@commons.apache.org">Commons Documentation Team</author>
  </properties>
  <body>
    <section name="User guide">
      <p>Apache Commons Crypto is a cryptographic library optimized with AES-NI
        (Advanced Encryption
        Standard New Instructions). It provides Java API for both cipher level and Java stream
        level. Developers can use it to implement high performance AES encryption/decryption with
        the minimum code and effort. Please note that Apache Commons Crypto doesn't implement the cryptographic
        algorithm such as AES directly. It wraps to Openssl or JCE which implement the algorithms.
      </p>
      <subsection name="Interfaces Overview">
        <p>Interfaces and classes used by the various implementation in the sub-packages.</p>
        <table>
          <tr>
            <td width="150">
              <a href="apidocs/index.html">random
              </a>
            </td>
            <td>
              The interface for CryptoRandom.
            </td>
          </tr>
          <tr>
            <td width="150">
              <a href="apidocs/index.html">cipher
              </a>
            </td>
            <td>
              The interface of cryptographic cipher for encryption and decryption.
            </td>
          </tr>
          <tr>
            <td width="150">
              <a href="apidocs/index.html">stream
              </a>
            </td>
            <td>
              The interface wraps the underlying stream and it automatically encrypts
              the stream when data is written and decrypts the stream when data is
              read.
            </td>
          </tr>
        </table>
      </subsection>

      <subsection name ="Usage">
        <ol style="list-style-type: decimal">
        <h4>Usage of Random API</h4>
        <p>
          CryptoRandom provides a cryptographically strong random number generators.
          The default implementation will use Intel® Digital Random Number Generator (DRNG)
          for accelerating the random generation.
        </p>
        <table>
          <tr>
            <td>
              //Constructs a byte array to store random data.<br/>
              byte[] key = new byte[16];<br/>
              byte[] iv = new byte[16];<br/>
              Properties properties = new Properties();<br/>
              //Gets the 'CryptoRandom' instance.<br/>
              CryptoRandom CryptoRandom = CryptoRandomFactory.getCryptoRandom(properties);<br/>
              //Generates random bytes and places them into the byte array.<br/>
              CryptoRandom.nextBytes(key);<br/>
              CryptoRandom.nextBytes(iv);<br/>
              //Closes the CryptoRandom.<br/>
              CryptoRandom.close();<br/>
            </td>
          </tr>
        </table>

        <h4>Usage of Cipher API</h4>
        <p>
          Cipher provides an cryptographic interface for encryption and decryption.
          We provide two kind of implementations: JCE Cipher and Openssl Cipher. The
          JCE implementation uses JCE provider and the Openssl implementation uses
          Intel® AES New Instructions (Intel® AES NI).
        </p>
        <h5>Usage of Byte Array Encryption/Decryption</h5>
        <table>
          <tr>
            <td>
              Properties properties = new Properties();<br/>
              //Creates a CryptoCipher instance with the transformation and properties.<br/>
              CryptoCipher cipher = Utils.getCipherInstance(CipherTransformation.AES_CTR_NOPADDING, properties);<br/><br/>
              String input = "hello world!";<br/>
              int inputOffset = 0;<br/>
              int inputLen = input.length();<br/>
              byte[] output = new byte[1024];<br/>
              int outputOffset = 0;<br/>
              //Initializes the cipher with ENCRYPT_MODE,key and iv.<br/>
              cipher.init(Cipher.ENCRYPT_MODE, key, iv);<br/>
              //Continues a multiple-part encryption/decryption operation for byte array.<br/>
              cipher.update(input.getBytes("UTF-8"), inputOffset, inputLen, output, outputOffset);<br/>
              //We should call do final at the end of encryption/decryption.<br/>
              cipher.doFinal(inBuffer, outBuffer);<br/>
              //Closes the cipher.<br/>
              cipher.close();
            </td>
          </tr>
        </table>

        <h5>Usage of ByteBuffer Encryption/Decryption</h5>
        <table>
          <tr>
            <td>
              Properties properties = new Properties();<br/>
              //Creates a Cipher instance with the transformation and properties.<br/>
              CryptoCipher cipher = Utils.getCipherInstance(CipherTransformation.AES_CTR_NOPADDING, properties);<br/><br/>
              int bufferSize = 4096;<br/>
              ByteBuffer inBuffer = ByteBuffer.allocateDirect(bufferSize);<br/>
              ByteBuffer outBuffer = ByteBuffer.allocateDirect(bufferSize);<br/>
              inBuffer.put("The data you want to encrypt or decrypt".getBytes("UTF-8"));<br/>
              //Initializes the cipher with ENCRYPT_MODE,key and iv.<br/>
              cipher.init(Cipher.ENCRYPT_MODE, key, iv);<br/>
              //Continues a multiple-part encryption/decryption operation for byte array.<br/>
              cipher.update(inBuffer, outBuffer);<br/>
              //We should call do final at the end of encryption/decryption.<br/>
              cipher.doFinal(inBuffer, outBuffer);<br/>
              //Closes the cipher.<br/>
              cipher.close();
            </td>
          </tr>
        </table>

        <h4>Usage of Stream API</h4>
        <p>
          Stream provides the data encryption and decryption in stream manner. We provide CryptoInputStream,
          CTRCryptoInputStream, PositionedCryptoInputStream implementations for InputStream and CryptoOutputStream,
          CTRCryptoOutputStream implementations for OutputStream.
        </p>
        <h5>Usage of stream encryption</h5>
        <table>
          <tr>
            <td>
              int bufferSize = 4096;<br/>
              String input = "hello world!";<br/>
              byte[] decryptedData = new byte[1024];<br/>
              //Encryption with CryptoOutputStream.<br/>
              //Initializes the cipher with ENCRYPT_MODE,key and iv.<br/>
              cipher.init(Cipher.ENCRYPT_MODE, key, iv);<br/>
              // Constructs the original OutputStream.<br/>
              OutputStream outputStream = new ByteArrayOutputStream();<br/>
              //Constructs the instance of CryptoOutputStream.<br/>
              CryptoOutputStream cos = new CryptoOutputStream(outputStream, cipher, bufferSize, key, iv);<br/>
              cos.write(input.getBytes("UTF-8"));<br/>
              cos.flush();<br/>
              cos.close();<br/>
            </td>
          </tr>
        </table>
        <h5>Usage of stream decryption</h5>
        <table>
          <tr>
            <td>
              // Decryption with CryptoInputStream.<br/>
              //Initializes the cipher with DECRYPT_MODE,key and iv.<br/>
              cipher.init(Cipher.DECRYPT_MODE, key, iv);<br/>
              //Constructs the original InputStream.<br/>
              InputStream inputStream = new ByteArrayInputStream(outputStream.toByteArray());<br/>
              //Constructs the instance of CryptoInputStream.<br/>
              CryptoInputStream cis = new CryptoInputStream(inputStream, cipher, bufferSize, key, iv);<br/>
              int decryptedLen = cis.read(decryptedData, 0, 1024);<br/>
              cis.close();<br/>
            </td>
          </tr>
        </table>
        </ol>
      </subsection>
    </section>
  </body>
</document>

