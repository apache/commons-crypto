# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Java CI

on:
  # allow direct trigger
  workflow_dispatch:
  push:
    paths-ignore:
      - '**/workflows/*.yml'
      - '!**/workflows/maven.yml'
  pull_request:
    paths-ignore:
      - '**/workflows/*.yml'

permissions:
  contents: read

jobs:
  build:

    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      matrix:
        # macos-latest and ubuntu-latest uses OpenSSL 3 which breaks tests
        os: [macos-11, ubuntu-20.04, windows-latest]
        # These names are used in conditional statements below.
        java: [ 8, 11, 17, 21 ]
        experimental: [false]
        # macos-11 / java21 keeps failing: java is loading libcrypto in an unsafe way
        # so change it to experimental to stop failing the entire workflow
        exclude:
        - os: macos-11
          java: 21
        include:
        - os: macos-11
          java: 21
          experimental: true
        # macos-13-arm64 does not appear to be available
        # include:
        #   - java: 21
        #     os: macos-13-arm64
        #     experimental: true
#        include:
#          - java: 22-ea
#            os: ubuntu-20.04
#            experimental: true
#          - java: 22-ea
#            os: windows-latest
#            experimental: true
#          - java: 22-ea
#            os: macos-latest
#            experimental: true
      fail-fast: false

    steps:
    - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      with:
        persist-credentials: false
    - uses: actions/cache@704facf57e6136b1bc63b828d79edcd491f0ee84 # v3.3.2
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Set up JDK ${{ matrix.java }}
      uses: actions/setup-java@0ab4596768b603586c0de567f2430c30f5b0d2b0 # v3.13.0
      with:
        distribution: 'temurin'
        java-version: ${{ matrix.java }}
    - name: OpenSSL version
      run: openssl version -a
    - name: OpenSSL engine (macos)
      # need to override the libarary on macOS
      if: ${{ matrix.os == 'macos-11' }}
      run: |
        echo $(openssl version -e | sed -n -e 's/engines-.*//' -e 's/: "/=/p') >> "$GITHUB_ENV"
    - name: OpenSSL engine (windows)
      # need to override the libarary on windows
      if: ${{ matrix.os == 'windows-latest' }}
      # e.g. ENGINESDIR: "C:\Program Files\OpenSSL\lib\engines-1_1"
      # The code below extracts "C:\Program Files\OpenSSL\lib", as expected
      # but this does not seem to be the correct setting to override system library
      # To be resolved...
      run: |
        openssl version -e
        chcp 65001 #set code page to utf-8
        echo ((openssl version -e) -replace ': "','=' -replace '\\engines-.*','') >> $env:GITHUB_ENV
    - name: Build with Maven
      shell: bash
      # OPENSSL_HOME is needed for Windows build to find some header files
      # It's not clear how one is supposed to find the correct setting;
      # The value below was found by searching for openssl files under C (warning: slow)
      # Other possible values are:
      # "C:\\Miniconda\\pkgs\\openssl-1.1.1n-h2bbff1b_0\\Library"
      # "C:\\ProgramData\\chocolatey\\lib\\mingw\\tools\\install\\mingw64\\opt"
      env:
        OPENSSL_HOME: "C:\\Miniconda\\Library"
      run: |
        mvn --show-version --batch-mode --no-transfer-progress -DtrimStackTrace=false -D"jni.library.path=$ENGINESDIR" -D"jna.library.path=$ENGINESDIR"
    - name: Run Crypto (JNI - override default lib)
      shell: bash
      run: |
        mvn --show-version --batch-mode --no-transfer-progress -q exec:java -D"exec.mainClass=org.apache.commons.crypto.Crypto" -D"commons.crypto.debug=true" -D"jni.library.path=$ENGINESDIR"
    - name: Run OpenSslJna (JNA - don't override lib)
      shell: bash
      # This is likely to fail, so reset the status
      run: |
        mvn --show-version --batch-mode --no-transfer-progress -q exec:java -D"exec.mainClass=org.apache.commons.crypto.jna.OpenSslJna" -D"commons.crypto.debug=true" || true
    - name: Run OpenSslJna (JNA - macOS from openssl version -a ENGINESDIR)
      if: ${{ matrix.os == 'macos-11' }}
      run: |
        mvn --show-version --batch-mode --no-transfer-progress -q exec:java -D"exec.mainClass=org.apache.commons.crypto.jna.OpenSslJna" -D"jna.library.path=$ENGINESDIR" -D"commons.crypto.debug=true"
    - name: Run OpenSslJna (JNA - Windows from openssl version -a ENGINESDIR)
      if: ${{ matrix.os == 'windows-latest' }}
      shell: bash
      run: |
        mvn --show-version --batch-mode --no-transfer-progress -q exec:java -D"exec.mainClass=org.apache.commons.crypto.jna.OpenSslJna" -D"jna.library.path=$ENGINESDIR" -D"commons.crypto.debug=true"
    - name: Check benchmark code compiles
      if: ${{ matrix.java == '8' }}
      env:
        OPENSSL_HOME: "C:\\Miniconda\\Library"
      run: |
        mvn --show-version --batch-mode --no-transfer-progress clean test-compile -Pbenchmark

  build-cross:
    strategy:
      matrix:
        include:
          - platform: aarch64
          - platform: riscv64
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          persist-credentials: false
      - uses: docker/setup-qemu-action@2b82ce82d56a2a04d2637cd93a637ae1b359c0a7 # v2
        with:
            platforms: ${{ matrix.platform }}
      - run: |
          # Build package
          docker compose -f src/docker/docker-compose.yaml run crypto src/docker/build.sh
          # Run on platform
          docker compose -f src/docker/docker-compose.yaml run crypto-${{ matrix.platform }}-test